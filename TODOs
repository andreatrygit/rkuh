const { Http2ServerRequest } = require('http2')

favicon.ico
prima il comando di build dei template
bloccare sotto IE 11 con alpine
header in rem
mettere tutti gli effetti di logout
apple svgs
; dopo html chars
prevent zoom
dependency versions in imports with CDN
prevent overscrool in index
fix header icons on safari
fix responsiveness on safari
controlla tutti gli url
pin specific version of alpine and not 3.x.x in prod
cookie gdpr
cancel timeclock interval su timeclock landing func..howto? usa destroy() in  x-data: è undocumented
cdn sri
check dependency in skypack: are they fork??
il timeout globale di 3 min non sembra funzionare se c'è un focus
encrypted connection to neo4j with encryption option at driver instantiation with js

switch to require
complete form errors
check all appid and appid list spelling
!!! require mechanism spoils files with success from daisyui

***
verifica bene i callback di kydata e kyframe in relazione agli errori di miro


DAISY V->2


IL CONNECTION URI DI NEO NON È FISSO

correggi framejs in base alla nuova semantica


per cancellare cookies
res.setHeader('Set-Cookie',[toughCookie(('rkuh_session-appid_'+req.query.appid),'',-1)]); //TODO cancella anche sul db

 res.setHeader('Set-Cookie',[toughCookie(('rkuh_session-appid_'+req.query.appid),'@@@@@',3*60)]); //TODO anche sul db
    res.status(200).json({"info":"logged-in: personal"});
  }
  else
  {
    res.status(200).json({"error":"wrong PIN"});


    pairing HTML

const baseString =
`<!DOCTYPE html>`+
`<html lang="en">`+
`<head>`+
    `<meta name="description" content="Rkuh Device Pairing" />`+
    `<meta charset="utf-8">`+
    `<title>Rkuh Device Pairing</title>`+
    `<meta name="viewport" content="width=device-width, initial-scale=1">`+
    `<meta name="author" content="Andrea Scotti">`+
    `<link rel="stylesheet" type="text/css" href="../../../../global.css">`+
`<head>`;

const successString =
`<body>`+
    `<div class="w-screen h-screen p-4 flex flex-col flex-nowrap justify-center items-center space-y-5 md:space-y-10">`+
        `<div class="text-6xl md:text-9xl animate-bounce">&#128516</div>`+
        `<div class="text-4xl md:text-6xl text-center">Questo dispositivo è ora associato ad Rkuh!</div>`+
        `<a href="../../../.." class="btn btn-primary btn-large">EFFETTUA L&#39&nbspACCESSO</a>`+
    `</div>`+
`</body>`;

const failureString =
`<body>`+
    `<div class="w-screen h-screen p-4 flex flex-col flex-nowrap justify-center items-center space-y-5 md:space-y-10">`+
        `<div class="text-6xl md:text-9xl animate-bounce">&#128562</div>`+
        `<div class="text-4xl md:text-6xl text-center">Qualcosa non va...questo dispositivo NON è stato associato ad Rkuh!</div>`+
        `<a href="../../../.." class="btn btn-primary btn-large">VAI ALLA HOME PAGE</a>`+
    `</div>`+
`</body>`;


reading from FS also with replacing functionality

const { readFileSync } = require('fs')

module.exports = (req, res) => {

  switch(req.cookies['__Host-rkuh_device']){
    case 'timeclock':
      res.status(200).send(readFileSync("src/lambdas/templates-html/landing/timeclock-device.html", 'utf8'));
      break;
    case 'shared':
      res.status(200).send(readFileSync("src/lambdas/templates-html/landing/shared-device.html", 'utf8'));
      break;
    case 'personal':
      if (req.query['force_site']==='1') {
        const tempString = readFileSync("src/lambdas/templates-html/landing/visitor-device.html", 'utf8');
        const finalString = tempString.replace('?_vercel_no_cache=1','?force_site=1&_vercel_no_cache=1'); //replacing
        res.status(200).send(finalString);  
      } else {
        res.status(200).send(readFileSync("src/lambdas/templates-html/landing/personal-device.html", 'utf8'));
      }
      break;  
    default:
      res.status(200).send(readFileSync("src/lambdas/templates-html/landing/visitor-device.html", 'utf8'));
      break;  
  }
  
}

res.setHeader('Set-Cookie',[toughCookie(('rkuh_session-appid_'+req.query.appid),'@@@@@',3*60)]); //TODO anche sul db
    res.status(200).json({"info":"logged-in: personal"});


LAST BIG frame.JS

module.exports = (req, res) => {
  const {isRequestFromLoggedInDevice, isRequestFromRegisteredDevice, isRequestFromNotRegisteredDevice} = require('../src/lambdas/validation.js');
  const {extractKeys} = require('../src/lambdas/utils.js');
  if (req.body && typeof(req.body)==='object'){
      const {frameName,...payload} = req.body;
      if(frameName){
          if (Object.keys(framesMapper).includes(frameName)) {
              const frameNameObj = framesMapper[frameName];
              let requestValidationResult = null;
              let tokenValue = null;
              if (frameNameObj.deviceType==='NotRegistered'){
                  requestValidationResult = isRequestFromNotRegisteredDevice(req);
                  if (!requestValidationResult[1]){
                      softBadAppidFrameRequest(res)
                      return;
                  }
                  else{
                      tokenValue = requestValidationResult[0];
                  }
              }
              if (frameNameObj.deviceType==='Registered'){
                  requestValidationResult = isRequestFromRegisteredDevice(req)
                  if (!requestValidationResult[1]){
                      softBadDeviceFrameRequest(res)
                      return;
                  }
                  else{
                      tokenValue = requestValidationResult[0];
                  }
              }
              if (frameNameObj.deviceType==='LoggedIn'){
                  requestValidationResult = isRequestFromLoggedInDevice(req)
                  if (!requestValidationResult[1]){
                      softBadSessionFrameRequest(res)
                      return;
                  }
                  else{
                      tokenValue = requestValidationResult[0];
                  }
              }
              let finalPayload;
              finalPayload = extractKeys(payload,frameNameObj.extractionKeys);
              if(frameNameObj.transofrmingPayloadLambda){finalPayload=frameNameObj.transofrmingPayloadLambda(finalPayload)}
              let payloadValidationResult = true;
              if(frameNameObj.validationLambda){payloadValidationResult=frameNameObj.validationLambda(finalPayload)}
              if(!payloadValidationResult){
                  softBadParametersFrameRequest(res);
                  return;
              }
              else{
                  finalPayload['tokenValue']=tokenValue;
                  if(frameNameObj.deviceType!=='GlobalVisitor'){
                      const {executeTransaction} = require('../src/lambdas/utils.js');
                  }
                  //mettere la gestione del Global Visitor che non si sa a quale db eventualmente parla..
              }
          }
          else{
              soft404(res);
          }
      }
      else{
          soft404(res);
      }
  }
  else{
      soft404(res);
  }
}